function Set_On_Off_Times_cont_CELL_v3_RPi_LogsUpdate
%
%     Updated version of script to add on and off times to each cell in a
% typical structure of a neuronal recording. Major overhaul done in April
% of 2016 by KBH to run faster and to incorporate on and off times
% collected programatically in the logfile generated by the Raspberry Pi
% sentinel code.
%
%  Script will now plot the mean firing rate of a cell overlaid on
%  gray/white bars to indicate light/dark (assuming a normal 12/12 L-D
%  phase). This is all set assuming 7:30 a.m. lights on and that time 0 is
%  7:30 a.m. on day 1 of the recording. The mean WF of the cell will be
%  overlaid on the entire plot to assist in disambiguating FRs from
%  multiunits and pFS cells.
%
% Two vertical, gray, dashed lines will indicate the 'borders' beyond which
% a click will automatically set the on/off time to the beginning/end of
% the experiment (i.e. clicking to the left of the left dashed line will
% set the first on-time to the start of the experiment). Relevant
% Raspberry-pi on and off times will then also be included in the on/off
% time field for the cell at hand.
%
% Users will be able to add only 1 on and 1 off time now, as the "crashes"
% are automatically logged and added. Users will be allowed to decide
% whether to move to the next cell or to redo the on/off decision for a
% given unit.
%

disp('Pick your CELL file.');
[lFile, lDir] = uigetfile('*.mat', 'Pick your CELL file.');
load([lDir lFile]);

% START HERE IF YOUR CELL VARIABLE IS ALREADY LOADED

animal = input('What is the animal code? ','s');
hem = input('Which hemisphere was deprived?, L or R? ','s');
disp('Pick your RPi log file.');
[piFile, piDir] = uigetfile('.txt','Pick your RPi log file.');
% [A,B] = textread([piDir piFile])


% Create a counter for backing up the data as the program is running. It's
% a pain when this crashes...
scount = 0;


clcheck = input('Clear prior on/off times? yes (1) or no (0) ');
if clcheck == 1
    % clear current on/off times:
    for ee = 1:size(CELL,2)
        CELL(ee).onTime = [];
        CELL(ee).offTime = [];
    end
end

if ~isfield(CELL,'EXPTSTART')
    disp('I need an experiment start time file...');
    [tFile,tDir] = uigetfile('.mat','Pick the experiment start file.');
    load([tDir filesep tFile]);
    for cx = 1:length(CELL)
        CELL(cx).EXPTSTART = tINFO;
    end
end

[onTs, offTs, strings] =  readraspiLog([piDir piFile],CELL(1).EXPTSTART);

hemcheck = input('Do you want to examine all channels? Yes 1 no 0. ');

if hemcheck == 1;
    valchans = 1:32;
elseif hemcheck == 0;
    
    lrhem = input('Left hem (L) or right (R)? ','s');
    
    if strcmp(lrhem,'r') || strcmp(lrhem,'R');
        valchans = 17:32;
    elseif strcmp(lrhem,'l') || strcmp(lrhem,'L');
        valchans = 1:16;
    end
end

% - - - - - - - - - - - - - - - - - - -
% Reset times to be relative to 7:30 am on the first day of recording, add
% on and off time fields, add animal fields, and make sure the deprived
% indicator is correct:

tdiff   = CELL(1).EXPTSTART  - 27000;
trem    = rem(tdiff,(24*3600));

%here
for ee = 1:length(CELL);
    CELL(ee).animal     = animal;
    CELL(ee).onTime     = [];
    CELL(ee).offTime    = [];
    if ~isempty(CELL(ee).time)
        if CELL(ee).time(1) > CELL(ee).EXPTSTART
            CELL(ee).time = CELL(ee).time - CELL(ee).EXPTSTART + trem;
            % removed the else statement here (used to be else: time =
            % time- trem). This is because we already align spike times to
            % 7:30 am in the binarySpikeProcessing_BETA script.
        end
    else
        fprintf('Empty times array! Cell %u, quality %u.\n',ee,CELL(ee).quality);
    end
    CELL(ee).trem       = trem;
    if ~isfield(CELL(ee),'scaledWF') || isempty(CELL(ee).scaledWF)
        CELL(ee).scaledWF = CELL(ee).meantrace / abs(min(CELL(ee).meantrace));
    end
    
    if strcmp(hem,'l') || strcmp(hem,'L') && CELL(ee).channel<17;
        CELL(ee).deprived = 1;
    elseif strcmp(hem,'l') || strcmp(hem,'L') && CELL(ee).channel>16;
        CELL(ee).deprived = 0;
    elseif strcmp(hem,'r') || strcmp(hem,'R') && CELL(ee).channel<17;
        CELL(ee).deprived = 0;
    elseif strcmp(hem,'r') || strcmp(hem,'R') && CELL(ee).channel>16;
        CELL(ee).deprived = 1;
    end
    
    % FIX THIS - - - INTERP NO LONGER EXISTS?
%     swf = interp1(CELL(ee).scaledWF,100);
    % calculate WF features - taken from KlustaKing
    % - - - - - - - - - - - 
    % halfwidth
    swf = [];
    swf = CELL(ee).scaledWF;
    bottom = find(swf == min(swf));
    [b,i] = min ( abs (swf(1:bottom) - -0.5)) ;
    [b,y] = min ( abs (swf(bottom+1:end) - -0.5)) ;
    y = y + bottom;
    CELL(ee).halfwidth = (y-b)/2441406.0;
    % neg pos time
    wfdiff = [];
    wfdiff = find(swf(bottom + 1 :end) == max(swf(bottom + 1:end)));
    CELL(ee).neg_pos_time = wfdiff;
    % tail slope
    
    if size(CELL(ee).scaledWF,2) == 33
        lims = [20 25];
    elseif size(CELL(ee).scaledWF,2) == 161
        lims = [97 122];
    elseif size(CELL(ee).scaledWF,2) == 91
        lims = [57 70];
    elseif size(CELL(ee).scaledWF,2) == 59;
        lims = [40 50];
    end
    xlims = 1:(diff(lims)+1);
    
    slope = polyfit( xlims  , CELL(ee).scaledWF( lims(1) : lims(2) ),1);
    CELL(ee).tailSlope = slope(1);
end
% - - - - - - - - - - - - - - - - - - -

nbins = ceil(offTs(end,1)/(12*3600));
edgesL = 0  : 24 : 12*nbins;
edgesD = 12 : 24 : 12*nbins;


t0  = 0;
t1  = max(offTs(:,1));
bin = 3600;

ee = input('What cell would you like to start on? 0 for default.');

if ee == 0;
    ee = 1;
end

OGqual = zeros(size(CELL,2),2);

%here2
while ee <= size(CELL,2);
    
    if CELL(ee).quality == 4;
        disp(['Skipping cell ' num2str(ee) '. Quality 4.']);
    end
    % only proceed if CELL is at least a quality 3
    if CELL(ee).quality < 4
        
        if any(CELL(ee).channel == valchans);
            
            clc
            disp(['Calculating ISI stats for neuron #' num2str(ee) '.']);
            drawnow
            try
                ip = isiDist_calc(CELL(ee).time,t0,t1,bin);
            catch
                keyboard;
            end
            h = figure (1);
            h1 = subplot(2,1,1); hold on
            
            
            A = histc(CELL(ee).time, 0 : 300 : offTs(end,1) );
            x = 1: 300 : offTs(end,1) ;
            B = A/300;
            
            % plot day/night coloring
            for qq = 1:size(edgesD,2);
                q = rectangle('Position',[edgesD(qq)*3600, 0, 12*3600, ceil(max(B))] );
                set(q,'facecolor',[0.8 0.8 0.8],'linestyle','none');
            end
            
            % plot automated off times
            for mm = 1:size(offTs,1)-1;
                m = rectangle('Position',[offTs(mm,1), 0, onTs(mm+1,1)-offTs(mm,1), ceil(max(B))] );
                set(m,'facecolor',[1.0 0.6 0.6],'linestyle','none');
            end
            
            % Plot limit lines - click "outside" of these to automatically set on
            % and off times to the beginning and end of the experiment.
            ln1 = line([3600*6+trem 3600*6+trem], [0 ceil(max(B))]);
            set(ln1,'linestyle','--','color',[0.2 0.2 0.2]);
            ln2 = line([offTs(end,1)-3600*6 offTs(end,1)-3600*6], [0 ceil(max(B))]);
            set(ln2,'linestyle','--','color',[0.2 0.2 0.2]);
            
            % Plot the firing rate trace
            set(h,'units','normalized','position',[0.01 0.25 0.98 0.5]);
            plot(x, B)
            set(gca,'xlim',[0 nbins*12*3600],'ylim',[0 ceil(max(B))]);
            ylabel('Firing Rate (Hz)');
            xlabel('Time (sec).');
            tt = title(['Neuron number ' num2str(ee) ' of ' num2str(size(CELL,2)) '.']);
            set(tt,'fontname','Times New Roman','fontsize',18);
            
            
            % Overlay a scaled mean waveform for help disambiguating FS appropriate
            % firing rates from those of RSU multi-units.
            tmpWF   = CELL(ee).scaledWF;
            if size(tmpWF,2) == 33
                WFx     = edgesD(1)*3600 : 3600*3 : edgesD(1)*3600 + 3600*98;
            elseif size(tmpWF,2) == 161
                WFx     = edgesD(1)*3600 : 3600*.5 : edgesD(1)*3600 + 3600*80;
            elseif size(tmpWF,2) == 91
                WFx     = edgesD(1)*3600 : 3600*1 : edgesD(1)*3600 + 3600*90;
            elseif size(tmpWF,2) == 59
                WFx     = edgesD(1)*3600 : 3600*1.5 : edgesD(1)*3600 + 3600*87;
            end
            WFy     = [CELL(ee).scaledWF + 1] * 0.5*(max(B)) + 0.1*max(B);
            
            plot(WFx,WFy,'color',[0.0 0.6 1]);
            
            i1 = text( edgesL(end-1)*3600,ceil(max(B))*0.95,['Qual: ' num2str(CELL(ee).quality)]);
            set(i1,'fontsize',18,'fontname','Times New Roman');
            
            switch CELL(ee).deprived
                case 1
                    depst = 'Deprived.';
                case 0
                    depst = 'Control.';
            end
            
            
            i2 = text( edgesL(end-1)*3600,ceil(max(B))*0.80,depst);
            set(i2,'fontsize',18,'fontname','Times New Roman');
            
            
            [xvs] = get(h1,'xlim');
            % set x limits so there's no discrepancy
            % - - - - - - - - - - - - - - - -
            h2 = subplot(2,1,2);
            
            plot(ip(2,:),ip(1,:),'r');
            set(h2,'xlim',xvs);
            yvs = get(h2,'ylim');
            
            if yvs(2)>10;
                set(h2,'ylim',[0 10]);
            end
            
            t22 = title('Percent ISI <2.5 msec.');
            set(t22,'fontname','Times New Roman','fontsize',14);
            ylabel('Percent');
            xlabel('Time (sec).');
            % - - - - - - - - - - - - - - - - - - - - -
            
            
            % set up on and off times and delete those that aren't within the user
            % selected range.
            %
            % set on and off time to limits of recording if click is within 6h of
            % start and end, respectively.
            
            h1;
            tx1 = text(edgesD(1)*3600,ceil(max(B))*0.75,'Click to set start time.');
            set(tx1,'fontsize',21,'fontname','Times New Roman');
            [x1,~] = ginput(1);
            delete(tx1);
            
            
            if x1 - onTs(1,1) < 3600*6
                x1 = onTs(1,1);
            end
            
            ln3 = line([x1 x1],[0 ceil(max(B))]);
            set(ln3,'linestyle','--','color',[0.6 0.0 0.8],'LineWidth',1.5);
            
            pause (0.2);
            
            tx2 = text(edgesD(1)*3600,ceil(max(B))*0.75,'Click to set end time.');
            set(tx2,'fontsize',21,'fontname','Times New Roman');
            [x2,~] = ginput(1);
            delete(tx2);
            
            tx3 = text(edgesD(1)*3600,ceil(max(B))*0.75,'Thanks!');
            set(tx3,'fontsize',21,'fontname','Times New Roman');
            
            if offTs(end,1) - x2 < 3600*6
                x2 = offTs(end,1);
            end
            
            
            ln4 = line([x2 x2],[0 ceil(max(B))]);
            set(ln4,'linestyle','--','color',[0.6 0.0 0.8],'LineWidth',1.5);
            
            pause(2);
            commandwindow;
            
            try
                clc;
                disp(['Current quality is ' num2str(CELL(ee).quality) '.']);
                OGqual(ee,1) = input('Update or confirm the quality: ');
                OGqual(ee,2) = CELL(ee).quality;
                CELL(ee).quality = OGqual(ee,1);
            catch
                keyboard
            end
            
            keeps = input('Move on (1) or redo (0)? ');
            
            if keeps == 1
                
                % correct for selected on time landing between pi assigned on
                % and off (in this case, move the selected time up to the
                % pi-selected on time):
                
                timetemp = [onTs; offTs]; 
                timetemp = sortrows(timetemp,1);
                [laststamp,~] = find(timetemp(:,1)<x1,1,'last');
                
                % correct selected time-on
                try
                    if timetemp(laststamp+1,2) == 1
                        x1 = timetemp(laststamp+1,1);
                    end
                catch
                    disp('caught a bad correction. no action required.');
                end
                    
                
                [laststamp2,~] = find(timetemp(:,1)<x2,1,'last');
                try
                    if timetemp(laststamp2,2) == 0
                        x2 = timetemp(laststamp2,1);
                    end
                catch
                    disp('caught a bad correction. no action required.');
                end
                
                
                % Write the on and off times into the structure. Only include
                % the on times greater than the selected start time and less
                % than the selected end time.
                
                scount = scount + 1;
                stmp{scount} = [ee; {[ x1; onTs(onTs(:,1)>x1 & onTs(:,1)<x2,1)]}; {[ offTs(offTs(:,1)>x1 & offTs(:,1)<x2); x2]}];
                save([lDir 'onoffbackupstemp.mat'],'stmp');
                disp(['Saved in progress data to ' (lDir) 'onoffbackupstemp.mat'])
                
                
                CELL(ee).onTime     = [ x1; onTs(onTs(:,1)>x1 & onTs(:,1)<x2,1)];
                CELL(ee).offTime    = [ offTs(offTs(:,1)>x1 & offTs(:,1)<x2); x2];
                
                if size(CELL(ee).onTime,1) ~= size(CELL(ee).offTime,1)
                    disp('Number of on and off times does not match');
                    keyboard
                end
                
                % Calculate the mean firing rate of the cell in this
                % experiment and whether it was online for >70% of the
                % experiment
                for ii = 1:length(CELL(ee).onTime)
                    
                    nspk(ii) = sum(CELL(ee).time > CELL(ee).onTime(ii) & CELL(ee).time< CELL(ee).offTime(ii));
                    totT(ii) = CELL(ee).offTime(ii) - CELL(ee).onTime(ii);
                    
                end
                
                if sum(totT) < (0.7 * CELL(ee).time(end))
                    CELL(ee).cont_stat = 0;
                else
                    CELL(ee).cont_stat = 1;
                end
                CELL(ee).rate_CELL = sum(nspk)/sum(totT);
                % - - - - - - - - - - - - - - - - - - - - - - - - -
                % move to the next cell:
                ee = ee + 1;
                % - - - - - - - - - - - - - - - - - - - - - - - - -
            else
                disp('Erasing the times you just set.');
                pause(0.5);
                CELL(ee).onTime  = [];
                CELL(ee).offTime = [];
            end
            
            delete(h);
            
        else
            % this is for skipping channels when the user opts to only work on
            % one hemisphere.
            ee = ee+1;
            
        end
    else
        ee=ee+1;
    end
    
end


nFile = [lFile(1:end-4) '_onOff.mat'];
disp(['Saving updated CELL file to ' lDir nFile]);
drawnow;
save([lDir nFile],'CELL','-v7.3');
clc
disp('Finished saving. Look in the mirror then do something impulsive.');

% If you've made it this far, delete the temp backup file.
if exist([lDir 'onoffbackupstemp.mat'],'file') == 2
    
    delete([lDir 'onoffbackupstemp.mat']);
    
end



