function [clusterIDs,numclusters] = klustakwik_cluster(features, minclusters, maxclusters, nstart, verbose, cleanup)
% KLUSTAKWIK_CLUSTER - Perform clustering with the KlustaKwik program
%
%  [CLUSTERIDS, NUMCLUSTERS] = KLUSTAKWIK_CLUSTER(FEATURES, MINCLUSTERS,
%           MAXCLUSTERS, NSTART, VERBOSE, [CLEANUP], [SHOWWAIT])
%
%  This Matlab program will create a text file with the features to be clustered,
%  call KlustaKwik, and return the cluster identity for each feature.
%
%  Temporary files called 'KlustaKwik.fet', 'KlustaKwik.clu', and 'KlustaKwik.log'
%  are created in the user's base Matlab directory. These files are cleaned up
%  (that is, deleted) before the funtion exits, unless the user specifies that they
%  should be preserved.
%
%  Inputs:
%    FEATURES  - An M x N matrix of features, where M is the dimension of the
%                features, and N is the number of features.
%    MINCLUSTERS - The minimum number of clusters to consider. Use empty ([])
%                  to impose no minimum.
%    MAXCLUSTERS - The maximum number of clusters to consider. Use empty ([])
%                  to impose no maximum.
%    NSTART - The number of starting locations
%    VERBOSE - Should KlustaKwik display its progress? (0/1)
%    CLEANUP - An optional 0/1 argument; if CLEANUP is 1 (the default), then
%              the temporary files are deleted before the function returns.
%    SHOWWAIT - An optional 0/1 argument; if SHOWWAIT is 1 (the default), then
%               a window saying "Please wait for Klustakwik" is shown while the
%               computation is taking place.
%
%  Outputs:
%    CLUSTERIDS - The cluster ID of each of the N features
%    NUMCLUSTERS - The total number of clusters returned by KlustaKwik.
%
%  Note: The "real" clusters are numbered 2..NUMCLUSTERS.  Cluster 1 seems to be
%  a noise cluster (can someone clarify this note?).
%
% Loosely based on code by Chris Niell and Matt Jones
%
%  Example:
%     % make 2 artificial groups
%     G1 = [ 3+randn(50,1) 0+randn(50,1) ];
%     G2 = [ 0+randn(50,1) 3+randn(50,1) ]; 
%     figure;
%     plot(G1(:,1),G1(:,2),'ro');
%     hold on;
%     plot(G2(:,1),G2(:,2),'gx');
%     ylabel('First feature');
%     xlabel('Second feature');
%     title('True clusters');
%
%     feature_data = [G1 ; G2];
%     
%     [clusterIDs,numClusters] = klustakwik_cluster(feature_data, 1, 5, 30, 0, 1);
%
%     colors = 'rgbmk'; symbols = ['oxs^+'];
%     figure;
%     for i=1:5,
%         inds = find(clusterIDs==i);
%         plot(feature_data(inds,1),feature_data(inds,2),[colors(i) symbols(i)]);
%         hold on;
%     end;
%     ylabel('First feature'); xlabel('Second feature'); 
%     title('Clusters generated by KlustaKwik');
%  

if nargin<6,
	clean = 1;
else,
	clean = cleanup;
end;

base_matlab_dir = pathstr2cellarray_embed(userpath);

feature_filename = [base_matlab_dir{1} filesep 'KlustaKwik.fet.0'];
cluster_filename = [base_matlab_dir{1} filesep 'KlustaKwik.clu.0'];
log_filename =     [base_matlab_dir{1} filesep 'KlustaKwik.klg.0'];

[M,N] = size(features);

fid = fopen(feature_filename,'wt','b');
if fid<0,
	error(['Could not open the file ' feature_filename ' for writing.']);
end;
dlmwrite(feature_filename,N);
dlmwrite(feature_filename,features,'-append','delimiter',' ');
fclose(fid);

command_string = [' ' base_matlab_dir{1} filesep 'KlustaKwik'];

if ~isempty(minclusters),
	command_string = [command_string ' -MinClusters ' int2str(minclusters) ' '];
end;
if ~isempty(maxclusters),
	command_string = [command_string ' -MaxClusters ' int2str(maxclusters) ...
				' -MaxPossibleClusters ' int2str(maxclusters) ' '];
end;
if ~isempty(nstart),
	command_string = [command_string ' -nStarts ' int2str(nstart) ' '];
end;
if ~isempty(verbose),
	command_string = [command_string ' -Screen ' int2str(verbose) ' '];
end;

mb = msgbox('Please wait for Klustakwik', 'KlustaKwik running');
x = findobj(mb,'Style','PushButton');
set(x,'String','Wait');
drawnow;

klustakwik_matlab(command_string);

close(mb);

try,
	g = load(cluster_filename,'-ascii');
catch,
		error(['Could not open file ' cluster_filename ' after KlustaKiwk call.']);
end;

numclusters = g(1);
clusterIDs = g(2:end);

if clean,
	delete(feature_filename);
	delete(cluster_filename);
	delete(log_filename);
end;


%%%%%%%%%%%%%%%%%%%%%%

function path_cellstr = pathstr2cellarray_embed(mypathstr) % embedded version of this function
pathstr = mypathstr;
sep = pathsep;

inds = [0 find(pathstr==sep)];

if inds(end)~=length(pathstr),  % make sure the last point is the point we wish to copy until
        inds(end+1) = length(pathstr)+1;
end;

path_cellstr = {};

for i=1:length(inds)-1,
        path_cellstr{i} = pathstr(inds(i)+1:inds(i+1)-1);
end;


