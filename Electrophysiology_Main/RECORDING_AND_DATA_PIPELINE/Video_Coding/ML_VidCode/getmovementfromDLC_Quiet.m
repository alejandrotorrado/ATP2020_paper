% getmovementfromDLC_Quiet
%
% Written by: Sam Wacks 2019
%
% Calculates movement from CSV files generated by Deep Lab Cut analysis
% Includes head-body comparison for detecting quiet movement
% Change fdir, prefix and suffix to match your files!

clearIDE; % clear workspace

%% CHANGE THESE PARAMETERS
% fdir: directory containing DLC CSV output files and CSV frame timestamps
%       files
% file_prefix: prefix for the files, usually animal name (e.g. AT54_55)
% file suffix: this will depend on the way you set up DLC
% num_files: number of CSV frame times files. NOTE: this may be higher than
%            the number of DLC files, because some videos will be corrupted
%            and won't be analyzed by DLC - but the frame timestamps will
%            still be there. Set this as the # of frametimes files.

% fdir = 'Z:\ANIMALDATA\MLS_DATA\BehavioralData\AT61\DLC_CSV';
fdir='D:\AT54_VIDCODE\DLC_CSV';
file_prefix = 'AT54_55_';
file_suffix = 'DLC_resnet50_RATATATJun6shuffle1_810000.csv';
num_files = 5687;

%% MAIN BODY
% initialize variables
COORD = [];
TS = [];
BODYCONF = [];
HCOORD = [];
HEADCONF = [];
bad_counter = 0;
bad_ID = [];

% Main loop
for ii = 1:num_files          %iterate through files
    fprintf('Processing file %u of %u.\n',ii,num_files);
    
    % get DLC position file
    pos_file = [fdir filesep file_prefix int2str(ii) file_suffix];
    % get frametimes file
    times_file = [fdir filesep file_prefix int2str(ii) '.csv'];
    
    % if you have a position file with this # ID, proceed
    if exist(pos_file, 'file')
        try
            array_file = csvread(pos_file,3,1);     %read in coordinates
        catch
%             keyboard;
            % Fix header if file is bad
            fprintf('Bad file! Fixing...\n');
            file_text = fileread(pos_file);
            file_text(1:351) = '';
            repl_text = regexprep(file_text,'[^ .\,\d\n\s]','');
            text_cell = textscan(repl_text,'%f%f%f%f%f%f%f','delimiter',',','HeaderLines',0);
            col2 = text_cell{2}(:);
            col3 = text_cell{3}(:);
            col4 = text_cell{4}(:);
            col5 = text_cell{5}(:);
            col6 = text_cell{6}(:);
            col7 = text_cell{7}(:);
            array_file = padcat(col2,col3,col4,col5,col6,col7);
            fprintf('Size of final array: (%u,%u)\n',size(array_file));
            if any(any(isnan(array_file)))
                
                [i,j] = find(isnan(array_file));
                if i==150 && j==6
                    array_file(i,j) = 1.0;
                else
                    keyboard;
                end
            end
        end
        
        % check if frametimes file exists
        if exist(times_file, 'file')
            try
                times = csvread(times_file);        %read in frame times
            catch
                keyboard;
            end
            
            % check that the number of frames in the frametimes file is the
            % same as the # of frames in the position file
            if length(times) ~= length(array_file)
                fprintf('\tTimes file %u does not match frames!\n', ii);
                bad_counter = bad_counter + 1;
                bad_ID{bad_counter} = ii;
                times = times(1:size(array_file,1));
            else
                body_coord = array_file(:,1:2);     %get coordinates from file
                head_coord = array_file(:,4:5);
                body_conf = array_file(:,3);        %confidence of coordinates
                head_conf = array_file(:,6);
                HCOORD = cat(1, HCOORD, head_coord);
                COORD = cat(1, COORD, body_coord);        %add data from each file to big array
                TS = cat(1, TS, times);
                BODYCONF = cat(1, BODYCONF, body_conf);
                HEADCONF = cat(1, HEADCONF, head_conf);
            end
        else
            fprintf('\tTimes not found for file %u\n', ii);
        end
    else
        fprintf('\tFile %u not found, skipping\n', ii);
    end
end

% calculate body and head position based on coordinates
POS = sqrt(COORD(:,1).^2 + COORD(:,2).^2);
HEAD = sqrt(HCOORD(:,1).^2 + HCOORD(:,2).^2);

%filter out bad data using confidence
fprintf('Filtering\n');
for jj = 1:length(POS)
    if BODYCONF(jj) < 0.9
        if jj > 1
            POS(jj) = POS(jj - 1);
        else
            POS(jj) = 0;
        end
    end
end

%filter out bad data using confidence
for kk = 1:length(HEAD)
    if HEADCONF(kk) < 0.9
        if kk > 1
            HEAD(kk) = HEAD(kk - 1);
        else
            HEAD(kk) = 0;
        end
    end
end

fprintf('Smoothing and exporting\n');

%export data as objects
MVT = abs(diff(POS));       %calculate movement by taking simple derivative
MVT_column = cat(1, NaN, MVT);      %make MVT column correct length
SMOOTH = smooth(MVT_column, 20, 'moving');      %smooth movement using package function
DATA.smooth_movement = SMOOTH';         %output object DATA for later processing
DATA.frame_times = TS;
DATA.nframes = length(POS);
RAW.raw_movement = MVT_column';     %RAW output doesn't seem to be used but was in VBT script
RAW.track = COORD;
head_mvt = abs(diff(HEAD));


fprintf('Quiet wake detection\n')
QUIET = zeros(size(head_mvt));      %quiet wake detection
for cc = 6:length(MVT)
   m_avg = nanmean(MVT((cc-5):cc));
   if m_avg < 0.3
       QUIET((cc-5):cc) = head_mvt(cc);
   end
end
QUIET = cat(1, NaN, QUIET);
DATA.quiet_mvt = QUIET';

%save to output file for behavioral coding
tic;
disp('Saving data...');
save_file = [fdir filesep file_prefix 'DLCpymovement.mat'];
save(save_file,'DATA','RAW','-v7.3');
toc;